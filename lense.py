import numpy as np
import matplotlib.pyplot as plt

# Задаем фокусное расстояние линзы
F = 5.2

# Задаем диапазон расстояний от предмета до линзы (от чуть больше 0 до большого значения)
# Избегаем деления на ноль и (d = F)
d_values = np.linspace(0.1, 100, 10000)
d_values = d_values[d_values != F]

# Вычисляем расстояния от линзы до изображения по формуле тонкой линзы
f_values = 1 / (1 / F - 1 / d_values)

# Построение графиков
plt.figure(figsize=(14, 6))


# График зависимости расстояния от линзы до изображения от расстояния от предмета до линзы
plt.subplot(1, 2, 1)
plt.plot(d_values, f_values, label="f (расстояние до изображения)")
plt.axhline(y=F, color='r', linestyle='--', label=f"Фокусное расстояние F = {F} см")
plt.xlabel("Расстояние от предмета до линзы, d (см)")
plt.ylabel("Расстояние от линзы до изображения, f (см)")
plt.title("Зависимость расстояния от линзы до изображения от расстояния от предмета до линзы")
plt.ylim(-100, 100)  # Ограничиваем ось y для наглядности
plt.legend()
plt.grid(True)

# Задаем фиксированное расстояние от предмета до линзы
d = 20  # см

# Задаем диапазон значений фокусного расстояния
f_values = np.linspace(0.1, d - 0.1, 1000)  # F не может быть больше или равно d

# Вычисляем увеличение
M_values = f_values / (d - f_values)

# График зависимости увеличения от расстояния от предмета до линзы
plt.subplot(1, 2, 2)
plt.plot(f_values, M_values, label="Увеличение (M)")
plt.axvline(x=d, color='r', linestyle='--', label=f"d = {d} см")
plt.xlabel("Фокусное расстояние линзы, F (см)")
plt.ylabel("Увеличение (M)")
plt.title("Зависимость увеличения от фокусного расстояния линзы")
plt.legend()
plt.grid(True)


plt.tight_layout()
plt.show()
